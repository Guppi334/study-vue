v-once 描画を変更させたくない場合に使用
v-htmlはクロスサイトスクリプティングの可能性があるため、信頼のあるコンテンツを表示する場合にのみ使用すること
vbindで動的に表現することができる


methodsよりもcomputedを使用するように
非同期処理を行う際はwatchを使用するが、基本はcomputedを使用する
watch内ではthis.を使用できないため、別の変数にthisを代入、その変数を参照して使用するようにする

{{}}でのcomputedは()をつけないがmethodsでは必ずつける
v-onディレクトティブで呼び出すmethodsでは()は付けなくてもよい

v-showではtemplateは使えない
v-showはcss のdisplay:noneにしているだけなので存在はしている
また、v-elseにあたるものがない
また、v-showは全部表示しているため初期表示が遅くなる
v-ifでは切り替え時の処理が遅くなる

頻繁に表示非表示を切り替える場合はv-showを、初期表示以降表示の切り替えがない場合はv-ifを使用する

v-forを使用する際はkeyをセットで使用をすること、templateタブはkey属性が使用できないため注意
keyの値はindexだと変動的になってしまうため使用しないこと 配列の内容が好ましい? 一意である必要がある

$mountはelプロパティを後付けで指定するために使用する

render関数では仮想ノードを作成、返している

assetsフォルダではcssや画像ファイルを配置する

コンポーネント名はパスカルケースで指定した場合、HTMLタグはケバブケースでも記載できる
逆は不可

DOMテンプレートで記載する際はケバブケースで記載しないといけない
vueCLIを使用する際はパスカルケース、webブラウザ上でのみ使用する場合はケバブケースで記載しないといけない

親コンポーネントから子コンポーネントに値を渡すにはpropsを利用する
propsではキャメルケースとケバブケースで記載をできる
これもDOMテンプレートの場合はケバブケースで記載、それ以外の場合はキャメルケースで記載する
おすすめは基本はscriptタグ内はキャメルケース、templateタグ内でpropsで使用する場合はケバブケースで記載すとよい

$emitは子コンポーネントが好きなタイミングで親コンポーネントのイベントを発火できる

propsは配列、オブジェクトは参照渡しとなるため注意する

$emitで作成するカスタムメソッド名はケバブケースで命名する
→DOMテンプレートを使用する可能性があるため

子コンポーネントにslotを配置することで、親コンポーネントでテンプレートを子コンポーネントに送ることができる
allback…slotで内容がなかった場合に表示するデフォルトのコンテンツ、slotタグ内に記載をする
slotを特定の内容のみ表示したい場合、表示したい内容をtemplateタグで囲い、v-slot:名前を設定、表示先のslotタグにname属性=名前を設定すればよい
slotPropsを利用することで子コンポーネントから親コンポーネントにデータを渡すこともできる


slot名がない場合、v-slot:default="slotProps"で取得できる

componentタグに :is=コンポーネント名とすることでコンポーネントを表示することができる

動的コンポーネントで切り替わる際にコンポーネントはすべてdestoroyされるため入力データが削除されたりしてしまう
これを防ぐためにkeep aliveを使用する
これを使用するとbeforeDestroy等のライフサイクルが使用できなくなるが、deactivated、activatedという新しいライフサイクルを利用することができる

v-model.lazyをつけるとフォーカスが外れた際にイベントが発火し、データの内容が反映される
.lazyをつけないと、入力された瞬間にデータが反映さえれる

.numberをつけることで数値に変換する

v-modelは双方向バインディング

一つのチェックボックスはboolean型、複数のチェックボックスでは配列でデータを持っている

input type="text"のみ:value=要素名 @input="要素名 = $event.target.value"に書き換えが可能

component内でv-modelを使用したい場合、コンポーネントファイルにprops、emitを追加してデータの受け渡しを実装する必要がある

カスタムディレクトティブの引数は１つしか取れない
値は複数ある場合はオブジェクト化することで対応できる

binding.modifiers.修飾名で修飾子が存在するかチェックできる

フィルターを適用させるためには"|" + フィルター名で記述する
フィルタは再描画される際に毎回適用される　メソッドと同様

mixinはオプションを共有化するもの jsファイルで作成、各コンポーネントでimportして使用する

mixinとコンポーネント内で同じオプションがある場合はコンポーネントのものが優先、
ライフサイクルフックがある場合は両方実行され、mixinが先に実行される
グローバルのmixinはすべてのコンポーネントに適用される

transitionは単一要素のみ、複数要素やりたい場合はdiv等でくくる、コンポーネント化することで対応する
typeを指定することでanimation、transitionどっちを優先するかを決める

transitionタグ内の要素にはkey属性をつける習慣をつける

transition内でmode属性を指定することで、切り替えを行う要素が消えてから、表示、表示してから消すといった制御ができる

transitionのフックのelはエレメント、ODM属性、doneは完了した合図、非同期で使用する
CSSのアニメーションとjavascriptのアニメーションが同時に使用される場合、doneはオプションとなる
CSSとJSの処理は両方行われる、優先されるということはない？
→ jsの
doneを使用した場合、CSSの処理が残っていた場合でもアニメーションは途中で終了される
leave-cancelledはv-showと同時に使用される場合にのみ有効化される

cssアニメーションを適用させない場合、対処のタグに:css="false"を入れる
transitionの再利用では、componentにし、中でslotを用いて値の受け渡しを行うことが定番

